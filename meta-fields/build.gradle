plugins {
	id 'java'
	id("maven-publish")
	id "com.gorylenko.gradle-git-properties" version "2.4.1"
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
}

dependencies {
	// https://mvnrepository.com/artifact/com.google.auto.service/auto-service
	annotationProcessor group: 'com.google.auto.service', name: 'auto-service', version: '1.1.1'
	compileOnly group: 'com.google.auto.service', name: 'auto-service', version: '1.1.1'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// https://mvnrepository.com/artifact/commons-io/commons-io
	testImplementation group: 'commons-io', name: 'commons-io', version: "2.15.0"
}

tasks.named('test') {
	useJUnitPlatform()
	// Set a temp directory as the working directory, because we are generating source files in the tests.
	def tempDir = File.createTempDir()
	tempDir.deleteOnExit()
	workingDir = tempDir
}

gitProperties {
	gitPropertiesName = "meta-fields-git.properties"
	keys = ['git.branch','git.build.version','git.commit.id','git.commit.time']
}
// make sure the generateGitProperties task always executes (even when git.properties is not changed)
generateGitProperties.outputs.upToDateWhen { false }

publishing {
	repositories {
		maven {
			name = "GitHubPackages"
			url = uri("https://maven.pkg.github.com/sc-moonlight/meta-fields")
			credentials {
				username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_TRIGGERING_ACTOR")
				password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
			}
		}
	}
	publications {
		gpr(MavenPublication) {
			from(components.java)
		}
	}
}
